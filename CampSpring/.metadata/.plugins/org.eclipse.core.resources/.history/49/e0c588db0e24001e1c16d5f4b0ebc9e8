package com.luv2code.springboot.cruddemo.security;

import org.springframework.security.config.Customizer

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class DemoSecurityConfig {
	
	@Bean
	public InMemoryUserDetailsManager userDetailsManager () {
		
				UserDetails john= User.builder()
						.username("john")
						.password("{noop}test123")
						.roles("EMPLOYEE")
						.build();
				UserDetails mary= User.builder()
						.username("mary")
						.password("{noop}test123")
						.roles("EMPLOYEE,MANAGER")
						.build();
				UserDetails susan= User.builder()
						.username("susan")
						.password("{noop}test123")
						.roles("EMPLOYEE,MANAGER,ADMIN")
						.build();
		
		return new InMemoryUserDetailsManager(john,mary,susan);
				
	}

	
	@Bean
	public SecurityFilterChain filterChain(HtppSecurity http) throws Exception{
			http.authorizeHttpRequests(configurer ->
			configurer
											.reuquestMatcher( HttpMethod.GET, "/api/employees").hasRole("EMPLOYEE")
											.reuquestMatcher( HttpMethod.GET, "/api/employees/**").hasRole("EMPLOYEE")
											.reuquestMatcher( HttpMethod.POST, "/api/employees").hasRole("MANAGER")
											.reuquestMatcher( HttpMethod.PUT, "/api/employees").hasRole("MANAGER")
											.reuquestMatcher( HttpMethod.DELETE, "/api/employees/**").hasRole("ADMIN")
			);
			
			// USE http Basic authenticaiton
			http.httpBasic(Customizer.withDefaults());
	}
}
